// Generated by CoffeeScript 1.6.2
(function() {
  var STOP, debug, dispatch_impl, error, info, is_nan, make_lambda, named_waits, stack, warn, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ref = require('libprotein'), make_lambda = _ref.make_lambda, is_nan = _ref.is_nan;

  dispatch_impl = require('libprotocol').dispatch_impl;

  _ref1 = dispatch_impl('ILogger', 'IHelper'), info = _ref1.info, warn = _ref1.warn, error = _ref1.error, debug = _ref1.debug;

  named_waits = {};

  STOP = null;

  stack = [];

  module.exports = {
    protocols: {
      definitions: {
        IHelper: [
          ['len', ['array']], ['add', ['vector']], ['drop', ['items_vec', 'cur_item']], ['swap', ['items_vec', 'cur_item']], ['inc', ['val']], ['dec', ['val']], ['parseint', ['val']], ['proxyinfo', ['a']], ['->->->', ['a']], [
            'say', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'info', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'warn', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'error', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'debug', ['msgs', 'more'], {
              vargs: true
            }
          ], ['not', ['a']], ['stop!', []], ['stop?', ['patrn', 'val']], [
            'wait', ['timeout'], {
              async: true
            }
          ], [
            'named-wait', ['timeout', 'name'], {
              async: true
            }
          ], ['cancel-wait', ['name']], ['preventOnEnter', ['event']], ['random', []], ['push-to-google', ['vec']], ['###', ['blk', 'args']], ['wrap', ['tpl', 'pattern', 'value']], ['true', []], ['false', []], ['the-undefined', []], ['spine-fire', ['event-name']], ['match', ['predicate', 'val']], ['slice', ['[start,count]', 'str']], ['push', ['i']], ['pop', []], ['make-obj', ['key-vals']], ['obj->json', ['obj']]
        ]
      },
      implementations: {
        IHelper: function(node) {
          return {
            'slice': function(_arg, str) {
              var count, start;

              start = _arg[0], count = _arg[1];
              return str.substr(start, count);
            },
            'push': function(i) {
              return stack.push(i);
            },
            'pop': function() {
              return stack.pop();
            },
            'match': function(predicate, value) {
              var real_predicate;

              real_predicate = make_lambda(predicate);
              if (real_predicate(value)) {
                return value;
              } else {
                return STOP;
              }
            },
            'spine-fire': function(event_name) {
              return Spine.trigger(event_name);
            },
            "true": function() {
              return true;
            },
            "false": function() {
              return false;
            },
            'the-undefined': function() {
              return void 0;
            },
            wrap: function(t, p, v) {
              return t.replace(p, v);
            },
            '###': function(block, args) {
              return args;
            },
            'push-to-google': function(p) {
              debug('push-to-google', p);
              return push_to_google.apply(null, p);
            },
            random: function() {
              return Math.random();
            },
            len: function(array) {
              return array.length || 0;
            },
            wait: function(timeout, cont) {
              debug("waiting " + timeout + "ms");
              return setTimeout(function() {
                debug("waiting done");
                return cont();
              }, timeout);
            },
            'named-wait': function(timeout, name, _, cont) {
              debug("named-wait", timeout, name);
              return named_waits[name] = setTimeout(function() {
                debug(debug("named-wait done", timeout, name));
                return cont();
              }, timeout);
            },
            'cancel-wait': function(name) {
              if (named_waits[name]) {
                debug("cancelling named timeout", name);
                return clearTimeout(named_waits[name]);
              }
            },
            not: function(a) {
              return !a;
            },
            "stop!": function() {
              return STOP;
            },
            "stop?": function(p, v) {
              if (p === v) {
                return STOP;
              } else {
                return v;
              }
            },
            add: function(vec) {
              return vec.reduce(function(a, b) {
                return (parseInt(a, 10)) + (parseInt(b, 10));
              });
            },
            drop: function(items, item) {
              var item_is_in_items;

              item_is_in_items = is_nan(item) ? !!(items.filter(function(i) {
                return is_nan(i);
              })).length : __indexOf.call(items, item) >= 0;
              if (item_is_in_items) {
                return STOP;
              } else {
                return item;
              }
            },
            swap: function(_arg, item) {
              var from, to;

              from = _arg[0], to = _arg[1];
              if (((is_nan(item)) && (is_nan(from))) || (item === from)) {
                return to;
              } else {
                return item;
              }
            },
            '->->->': function(a) {
              debug("[->->->]", a);
              return a;
            },
            proxyinfo: function(a) {
              console.log("%c[proxy:@" + node.id + "] ", 'background: #222; color: #bada55', "incoming: " + a + ", type: " + (typeof a));
              return a;
            },
            info: info,
            error: error,
            warn: warn,
            debug: function() {
              var a;

              a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return debug.apply(null, a);
            },
            say: info,
            inc: function(v) {
              return parseInt(v, 10) + 1;
            },
            dec: function(v) {
              return parseInt(v, 10) - 1;
            },
            parseint: function(v) {
              return parseInt(v);
            },
            preventOnEnter: function(e) {
              if (e.keyCode === 13) {
                e.preventDefault();
              }
              return e;
            },
            'make-obj': function(keyvals) {
              var key, obj, val, _i, _len, _ref2;

              obj = {};
              for (_i = 0, _len = keyvals.length; _i < _len; _i++) {
                _ref2 = keyvals[_i], key = _ref2[0], val = _ref2[1];
                obj[key] = val;
              }
              return obj;
            },
            'obj->json': function(obj) {
              return JSON.stringify(obj);
            }
          };
        }
      }
    }
  };

}).call(this);
