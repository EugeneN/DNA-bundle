// Generated by CoffeeScript 1.6.2
(function() {
  var $, IDom, debug, dispatch_impl, error, in_subtree, info, is_array, is_function, jqidom, warn, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  dispatch_impl = require('libprotocol').dispatch_impl;

  _ref = dispatch_impl('ILogger', 'IDom'), info = _ref.info, warn = _ref.warn, error = _ref.error, debug = _ref.debug;

  _ref1 = require('libprotein'), is_array = _ref1.is_array, is_function = _ref1.is_function;

  $ = require('commonjs-jquery');

  IDom = [
    ['set-html!', ['new_content']], ['html', ['new_content']], ['get-html', []], ['setValue', ['new_value']], ['setText', ['text']], ['getValue', []], ['alert', ['msg']], ['click', ['handler']], ['click-once', ['handler']], ['globalclick', ['handler']], ['keyDown', ['handler']], ['keyUp', ['handler']], ['globalKeyDown', ['handler']], ['on_change', ['handler']], ['change', ['handler']], ['appendContent', ['content']], ['kill', []], ['kill-9', []], ['stop_event', ['e']], ['setAttr', ['attr', 'value']], ['getAttr', ['attr']], ['dbclick', ['e']], ['focusout', ['e']], ['focus', []], ['select', []], ['mouse_enter', ['handler']], ['mouseout', ['handler']], ['get_by_attr', ['attr']], ['get_by_id', ['id']], ['getData', ['attr', 'node']], ['get_id', ['node']], ['disable', []], ['enable', []], ['canWrite', []], ['readonly', []], ['on_dom_ready', ['f']], ['one', ['sel']], ['document', []], ['get_root_node', []], ['add_event_listener', ['event_name', 'handler']], ['trigger', ['event', 'args']], ['on_document_loaded', ['f']], ['addClass', ['cls']], ['removeClass', ['cls']], ['toggleClass', ['from_to']], ['toggleText', ['x', 'y']], ['data', []], [
      'data-key', ['key'], {
        doc: "Returns key from data attrs"
      }
    ], ['target', ['ev']], ['current-target', ['ev']], ['is_in', ['subtree', 'ev']], ['parent', []], ['text!', ['text']], ['append-to', ['to_sel', 'which_sel']], ['click!', ['orig_ev']], ['get_form_data', []], ['preventDefault', ['ev']], ['prepend', ['content']], ['click-delegate', ['selector', 'handler']], ['hover-delegate', ['selector', 'handler']], ['delegate', ['action', 'selector', 'handler']], ['global-key', ['keys', 'handler']]
  ];

  in_subtree = function($node, target) {
    if (!!$node.find(target).length || ($node.is(target))) {
      return true;
    } else {
      return false;
    }
  };

  jqidom = function(node) {
    var $node;

    $node = $(node);
    return {
      'global-key': function(key, h) {
        var keys;

        keys = is_array(key) ? key : [key];
        return $(document).bind('keydown', function(ev) {
          var _ref2;

          if (_ref2 = ev.which, __indexOf.call(keys, _ref2) >= 0) {
            return h(ev.which);
          }
        });
      },
      'click-delegate': function(sel, handler) {
        var real_sel;

        real_sel = is_function(sel) ? sel() : sel;
        return ($(real_sel)).click(handler);
      },
      'hover-delegate': function(sel, handler) {
        var real_sel;

        real_sel = is_function(sel) ? sel() : sel;
        return ($(real_sel)).mouseenter(handler);
      },
      delegate: function(action, selector, handler) {
        return $(selector).on(action, handler);
      },
      preventDefault: function(ev) {
        return ev.preventDefault();
      },
      get_form_data: function() {
        return $node.serializeObject();
      },
      prepend: function(content) {
        return $node.prepend(content);
      },
      'click!': function(orig_ev) {
        return $node.click();
      },
      mouseout: function(handler) {
        return $node.mouseleave(handler);
      },
      "append-to": function(to_sel, which_sel) {
        return ($(which_sel)).appendTo(to_sel);
      },
      "text!": function(t) {
        return $node.text(t);
      },
      disable: function() {
        return $node.attr('disabled', 'disabled');
      },
      enable: function() {
        return $node.removeAttr('disabled');
      },
      data: function() {
        return $node.data();
      },
      'data-key': function(key) {
        return $node.data(key);
      },
      parent: function() {
        return $node.parent();
      },
      target: function(ev) {
        return ev.target;
      },
      'current-target': function(ev) {
        return ev.currentTarget;
      },
      is_in: function(subtrees, target_node) {
        var elid, _i, _len;

        for (_i = 0, _len = subtrees.length; _i < _len; _i++) {
          elid = subtrees[_i];
          $node = elid === 'this' ? $node : $("#" + elid);
          if (in_subtree($node, target_node)) {
            return true;
          }
        }
        return false;
      },
      'set-html!': function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return $node.html(args.join(''));
      },
      html: function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return $node.html(args.join(''));
      },
      'get-html': function() {
        return $node.html();
      },
      setValue: function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return $node.val(args.join(''));
      },
      setText: function(text) {
        return $node.text(text);
      },
      getValue: function() {
        if (($node.prop('tagName')).toLowerCase() === 'span') {
          return $node.text();
        } else {
          return $node.val();
        }
      },
      setAttr: function(attr, value) {
        return $node.attr(attr, value);
      },
      getAttr: function(name) {
        return $node.attr(name);
      },
      appendContent: function(content) {
        return $node.append("<div>" + content + "</div>");
      },
      alert: function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return alert.apply(null, args);
      },
      click: function(handler) {
        return $node.click(handler);
      },
      'click-once': function(handler) {
        return $node.one('click', handler);
      },
      globalclick: function(handler) {
        return $(document).click(handler);
      },
      kill: function() {
        return $node.remove();
      },
      'kill-9': function() {
        return $node.remove();
      },
      stop_event: function(e) {
        return $.Event(e).stopPropagation();
      },
      keyDown: function(handler) {
        return $node.bind('keydown', handler);
      },
      keyUp: function(handler) {
        return $node.bind('keyup', handler);
      },
      globalKeyDown: function(handler) {
        return $(document).bind('keydown', handler);
      },
      on_change: function(handler) {
        return $node.bind('onchange', handler);
      },
      change: function(handler) {
        return $node.change(handler);
      },
      dbclick: function(handler) {
        return $node.dblclick(handler);
      },
      focusout: function(handler) {
        return $node.blur(handler);
      },
      focus: function() {
        return $node.focus();
      },
      select: function() {
        return $node.select();
      },
      mouse_enter: function(handler) {
        return $node.mouseenter(handler);
      },
      get_by_attr: function(attr) {
        var e, r1;

        r1 = (function() {
          try {
            if ($node.is(attr)) {
              return [$node];
            } else {
              return [];
            }
          } catch (_error) {
            e = _error;
            return [];
          }
        })();
        return r1.concat(($node.find(attr)).toArray());
      },
      get_by_id: function(id) {
        return $("#" + id);
      },
      getData: function(attr, node) {
        if (node == null) {
          node = $node;
        }
        return ($(node)).data(attr);
      },
      get_id: function(node) {
        if (node == null) {
          node = $node;
        }
        return ($(node)).attr('id');
      },
      on_dom_ready: function(f) {
        return ($(document)).ready(f);
      },
      on_document_loaded: function(f) {
        return ($(window)).load(f);
      },
      canWrite: function() {
        return $node.removeAttr('readonly');
      },
      readonly: function() {
        return $node.attr('readonly', 'readonly');
      },
      one: function(sel) {
        return $(sel);
      },
      document: function() {
        return window.document;
      },
      get_root_node: function() {
        return node;
      },
      add_event_listener: function(event_name, handler) {
        if (node.addEventListener) {
          return node.addEventListener(event_name, handler);
        } else if (node.attachEvent) {
          return node.attachEvent("on" + event_name, handler);
        } else {
          error("Can't add event listener: no addEventListener nor attachEvent present", event_name, node);
          throw "Can't add event listener: no addEventListener nor attachEvent present";
        }
      },
      trigger: function(event, args) {
        return $node.trigger(event, args);
      },
      addClass: function(cls) {
        return $node.addClass(cls);
      },
      removeClass: function(cls) {
        return $node.removeClass(cls);
      },
      toggleClass: function(_arg) {
        var from, to;

        from = _arg[0], to = _arg[1];
        if ($node.hasClass(from)) {
          $node.removeClass(from);
          return $node.addClass(to);
        } else {
          $node.removeClass(to);
          return $node.addClass(from);
        }
      },
      toggleText: function(x, y) {
        if (x === $node.text()) {
          return $node.text(y);
        } else {
          return $node.text(x);
        }
      }
    };
  };

  module.exports = {
    protocols: {
      definitions: {
        IDom: IDom
      },
      implementations: {
        IDom: jqidom
      }
    }
  };

}).call(this);
